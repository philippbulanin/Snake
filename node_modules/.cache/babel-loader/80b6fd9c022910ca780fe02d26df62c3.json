{"ast":null,"code":"import _classCallCheck from \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Google \\u0414\\u0438\\u0441\\u043A\\\\Projects\\\\React\\\\snake\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Field } from \"./Field\";\n\nvar Snake =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Snake, _React$Component);\n\n  function Snake(props) {\n    var _this;\n\n    _classCallCheck(this, Snake);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Snake).call(this, props));\n    _this.state = {\n      field: [],\n      xSize: 10,\n      ySize: 10,\n      headX: 5,\n      headY: 7,\n      snakeLength: 3,\n      direction: \"left\",\n      appleX: 0,\n      appleY: 0\n    };\n    return _this;\n  }\n\n  _createClass(Snake, [{\n    key: \"generateApple\",\n    value: function generateApple() {\n      // while(this.state.field[this.state.appleX][this.state.appleY].className === \"snake\") {\n      this.setState({\n        appleX: Math.round(Math.random() * this.state.xSize),\n        appleY: Math.round(Math.random() * this.state.ySize)\n      }); //  }\n    }\n  }, {\n    key: \"drawField\",\n    value: function drawField() {\n      this.generateApple();\n      var data = [];\n      var className = \"\";\n\n      for (var x = 0; x < this.state.xSize; x++) {\n        data[x] = [];\n\n        for (var y = 0; y < this.state.ySize; y++) {\n          if (x === this.state.headX && y === this.state.headY) {\n            className = \"snake\";\n          } else if (x === this.state.appleX && y === this.state.appleY) {\n            className = \"apple\";\n          } else {\n            className = \"pixel\";\n          }\n\n          data[x].push({\n            key: x + \"\" + y,\n            className: className\n          });\n        }\n      }\n\n      this.setState({\n        field: this.state.field.concat(data)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Field, {\n        field: this.state.field,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"start-btn\",\n        onClick: this.drawField.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"START\"));\n    }\n  }]);\n\n  return Snake;\n}(React.Component);\n\nReactDOM.render(React.createElement(Snake, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:\\Google Диск\\Projects\\React\\snake\\src\\index.js"],"names":["React","ReactDOM","Field","Snake","props","state","field","xSize","ySize","headX","headY","snakeLength","direction","appleX","appleY","setState","Math","round","random","generateApple","data","className","x","y","push","key","concat","drawField","bind","Component","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Field} from \"./Field\";\n\nclass Snake extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            field: [],\n            xSize: 10,\n            ySize: 10,\n            headX: 5,\n            headY: 7,\n            snakeLength: 3,\n            direction: \"left\",\n            appleX: 0,\n            appleY: 0\n        };\n    }\n\n    generateApple() {\n       // while(this.state.field[this.state.appleX][this.state.appleY].className === \"snake\") {\n            this.setState({\n                appleX: Math.round(Math.random()*this.state.xSize),\n                appleY: Math.round(Math.random()*this.state.ySize)\n            });\n      //  }\n    }\n\n    drawField() {\n        this.generateApple();\n        let data = [];\n        let className = \"\";\n        for (let x = 0; x < this.state.xSize; x++) {\n            data[x] = [];\n            for (let y = 0; y < this.state.ySize; y++) {\n                if (x === this.state.headX && y === this.state.headY) {\n                    className = \"snake\"\n                } else if (x === this.state.appleX && y === this.state.appleY) {\n                    className = \"apple\"\n                } else {\n                    className = \"pixel\"\n                }\n                data[x].push({key: x + \"\" + y, className: className});\n            }\n        }\n        this.setState({\n            field: this.state.field.concat(data)\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <Field field={this.state.field}/>\n                <button className=\"start-btn\" onClick={this.drawField.bind(this)}>START</button>\n            </div>\n\n        )\n    }\n}\n\nReactDOM.render(<Snake/>, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}